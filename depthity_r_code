library(fda)
library(e1071)

find.i <- function(n, ind) {
  # Helper function to find the depthity values that correspond to a particular data point
  # Called by function computeDepthity
  # Inputs:
  #  n - number of observations in data set
  #  ind - the index of the point for which we want to find all depthity values for
  # Outputs: 
  #  out - vector of indexes that involve point ind
  k <- 1
  out <- c()
  for (i in 1:(n-1)) {
    for (j in (i+1):n) {
      if (i==ind | j==ind)
        out <- c(out, k)
      k <- k + 1
    }
  }
  return(out)
}

depthity <- function(data, kernel="linear", range=2, angle=45, p1=1, p2=0) {
  # kernelized version of depthity
  # 
  # inputs: 
  #   data - a data matrix of explanetory variables
  #   kern - a kernel function (of form "linear", "rbf" or "poly", or a function)
  #   range - how far from the anchor point should we extend in each direction
  #   angle - angle of cone from midline
  #   p1 - first parameter for kernel
  #   p2 - second parameter for kernel
  # returns:
  #   object to be used by function computeDepthity
  if (is.function(kernel)==TRUE)
    kern <- kernel
  if (kernel == "linear") {
    kern <- function(x,y)
      return(sum(x*y))
  }
  if (kernel == "rbf") {
    kern <- function(x,y)
      return(exp(-sum((x-y)^2)/p1))
  }             
  if (kernel == "poly") {
    kern <- function(x,y)
      return((sum(x*y)+p2)^p1)
  }
  gram <- matrix(0,nrow(data), nrow(data))
  for (i in 1:nrow(data)) {
    for (j in i:nrow(data)) {
      gram[i,j] <- kern(data[i,], data[j,])
      gram[j,i] <- gram[i,j]
    }
  }
  splits <- seq(-range,range,length.out=100)
  depthity <- rep(0,nrow(data))
  dep <- c()
  data <- apply(data, 2, scale)
  norm.k2 <- rep(0, nrow(data))
  error.k <- rep(0, nrow(data))
  k.to.mid <- rep(0, nrow(data))
  for (i in 1:(nrow(data)-1)) {
    for (j in (i+1):nrow(data)) {
      for (k in 1:nrow(data)) {
        norm.k2[k] <- gram[k,k] + 1/4*(gram[i,i]+gram[j,j]) + 1/2*gram[i,j]-gram[k,i]-gram[k,j]
        k.to.mid[k] <- (gram[k,i]-gram[k,j]+1/2*(gram[j,j]-gram[i,i]))/sqrt(gram[i,i]+gram[j,j]-2*gram[i,j])
        error.k[k] <- sqrt(abs(norm.k2[k] - k.to.mid[k]^2))
      }
      for (c in 1:length(splits)) {
        good <- rep(1, nrow(data))
        s <- splits[c]
        good[k.to.mid/s > 1] <- 0  #points on other side of cone tip removed
        d.to.tip <- abs(k.to.mid - s)
        good <- good * (abs(atan(error.k / d.to.tip)) < (angle/360*2*pi))  #points outside of cone removed
        good <- good * (1 - 2*(sign(k.to.mid)==sign(s)))  #which side of midpoint are they on
        depthity[c] <- min(c(sum(good==-1), sum(good==1)))
      }
      dep <- rbind(dep, depthity)
    }
  }
  return(list(angle=angle, depths=dep))
}


computeDepthity <- function(depthity.out, y) {
  # Function to take "local" depths computed by functuion depthity and return quantile function
  # Inputs: 
  #  depthity.out: an object created by function depthity 
  #  y:  labels for the class of training data (binary, NA for non-training observations)
  # Outputs: 
  #  within - matrix of average depthity values for pairs of points in same class
  #  between - matrix of average depthity values for pairs of points in different classes
  qfns <- matrix(0, nrow=length(y)-1, ncol=101)
  depths <- depthity.out$depths
  ###compute the depthity functions
  zero <- c()
  one <- c()
  n <- length(y)
  for (i in 1:n) {
    qs <- seq(0,1,.01)  #computes quantiles at 101 length partition of unit interval
    ind <- find.i(n, i)
    for (k in 1:length(ind)) 
      qfns[k, ] <- quantile(depths[ind[k],], qs)#, na.rm=TRUE)
    zero <- rbind(zero, apply(qfns[which(y[-i]==0),], 2, mean))  #average over all other points that have label 0
    one <- rbind(one, apply(qfns[which(y[-i]==1),], 2, mean))  #average over all other points that have label 1
  }
  return(list(depth.zero=zero,depth.one=one))
}


depth.classify <- function(depths, y) {
  # Function to predict class of observations of unknown (NA) classes via fPCA and SVM
  # Requires packages fda and e1071
  # Inputs:
  #  depthity - an object produced by computeDepthity
  #  y - a binary (0,1) vector that has at least one value of NA
  # Returns:
  #  class - a predicted class for all test observations
  if (any(is.na(y))==FALSE) {
    stop("must have at least one observation with unknown class")
  }
  b1.2 <- create.bspline.basis(nbasis=47, norder=4)
  funs <- rbind(depths$depth.zero, depths$depth.one)
  out <- Data2fd(argvals=seq(0,1,.01), y=t(funs), basisobj=b1.2)
  pca <- pca.fd(out,nharm=4)
  scores <- cbind(pca$scores[1:length(y),], pca$scores[length(y)+(1:length(y)),])
  scores.data <- data.frame(scores, y)
  scores.train <- scores.data[is.na(y)==FALSE,]
  scores.test <- scores.data[is.na(y)==TRUE,]
  fit <- svm(y ~ . , data=scores.train, kernel="linear")
  pred <- predict(fit, scores.test)
  return(round(pred))
}

###Sample Usage
data.temp <- iris[c(1:10,51:60),]
x <- as.matrix(data.temp[,1:4])
y <- as.numeric(data.temp[,5]) - 1 #subtraction to make it 0,1
y[sample(20,7)] <- NA
d1 <- depthity(x)
d2 <- computeDepthity(d1,y)
depth.classify(d2,y)
