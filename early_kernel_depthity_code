#DO NOT USE, USE FUNCTION DEPTHITY IN OTHER FOLDER

depthity.kern <- function(data, kern, angle=45) {
  # kernelized version of depthity
  # 
  # inputs: 
  #   data - a data matrix of explanetory variables
  #   kern - a kernel function
  #   angle - angle of cone from midline
  splits <- seq(-1,1,length.out=100)
  depthity <- rep(0,nrow(data))
  dep <- c()
  data <- apply(data, 2, scale)
  norm.k2 <- rep(0, nrow(data))
  error.k <- rep(0, nrow(data))
  k.to.mid <- rep(0, nrow(data))
  for (i in 1:(nrow(data)-1)) {
    for (j in (i+1):nrow(data)) {
      for (k in 1:nrow(data)) {
        norm.k2[k] <- kern(data[k,],data[k,]) + 1/4*(kern(data[i,],data[i,])+kern(data[j,],data[j,])) + 1/2*kern(data[i,],data[j,])-kern(data[k,], data[i,])-kern(data[k,], data[j,])
        k.to.mid[k] <- (kern(data[k,], data[i,])-kern(data[k,], data[j,])+1/2*(kern(data[j,], data[j,])-kern(data[i,], data[i,])))/sqrt(kern(data[i,],data[i,])+kern(data[j,],data[j,])-2*kern(data[i,], data[j,]))
        error.k[k] <- sqrt(abs(norm.k2[k] - k.to.mid[k]^2))
      }
      for (c in 1:length(splits)) {
        good <- rep(1, nrow(data))
        s <- splits[c]
        good[k.to.mid/s > 1] <- 0  #points on other side of cone tip removed
        d.to.tip <- abs(k.to.mid - s)
        good <- good * (abs(atan(error.k / d.to.tip)) < (angle/360*2*pi))  #points outside of cone removed
        good <- good * (1 - 2*(sign(k.to.mid)==sign(s)))  #which side of midpoint are they on
        depthity[c] <- min(c(sum(good==-1), sum(good==1)))
      }
      dep <- rbind(dep, depthity)
    }
  }
  return(list(angle=angle, depths=dep))
}

################
####Sample Usage
################

data <- iris[1:100,1:4]
kern <- function(x,y,sigma=10)
  return(exp(-sum((x-y)^2)/sigma))
deps <- depthity.kern(data, kern )
output <- computeDepthity(deps, c(rep(0,50), rep(1,50)))
plot(c(0,1), c(0,35), t='n')
for (i in 51:100) {
  lines(seq(0,1,.01), output$depth.zero[i,],col='red', lwd=.3)
  lines(seq(0,1,.01), output$depth.one[i,],col='blue', lwd=.3)
}
for (i in 1:50) {
  lines(seq(0,1,.01), output$depth.zero[i,],col='blue', lwd=.3)
  lines(seq(0,1,.01), output$depth.one[i,],col='red', lwd=.3)
}
